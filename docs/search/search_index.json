{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Static file serving with bareASGI \u00b6 Static file support for bareASGI .","title":"Static file serving with bareASGI"},{"location":"#static-file-serving-with-bareasgi","text":"Static file support for bareASGI .","title":"Static file serving with bareASGI"},{"location":"api/bareasgi_static/","text":"API \u00b6 function bareasgi_static . add_static_file_provider \u00b6 Summary \u00b6 Add static file support. bareasgi_static . add_static_file_provider ( app : Application , source_folder : str , * , mount_point : str , check_source_folder : bool , index_filename : Union[str, NoneType] ) Parameters \u00b6 app : Application (optional) The bareASGI application. source_folder : str (optional) Where to find the files to serve. * (optional) mount_point : str Where the files should appear on the url. check_source_folder : bool If True check the source folder exists. index_filename : Union[str, NoneType] An optional index file name. Returns \u00b6 Any : class StaticFilesProvider \u00b6 Summary \u00b6 A static file provider. bareasgi_static . StaticFilesProvider ( * , path_variable : Union[str, NoneType] , check_source_folder : bool , index_filename : Union[str, NoneType] ) Parameters \u00b6 * (optional) path_variable : Union[str, NoneType] A path variable to capture the mount point. check_source_folder : bool If True check the source folder exists. index_filename : Union[str, NoneType] An optional index file name. async function bareasgi_static . file_response \u00b6 Summary \u00b6 A utility method to create a file response. async bareasgi_static . file_response ( scope : Mapping[strAny] , status : int , path : str , headers : UnionListTuple[bytes, bytes]], NoneType] , content_type : Union[str, NoneType] , filename : Union[str, NoneType] , check_modified : Union[bool, NoneType] ) Parameters \u00b6 scope : Mapping[strAny] (optional) The ASGI scope. status : int (optional) The HTTP status code. path : str (optional) The path to the file. headers : UnionListTuple[bytes, bytes]], NoneType] The headers. content_type : Union[str, NoneType] The content type. filename : Union[str, NoneType] The filename. check_modified : Union[bool, NoneType] If True check for modifications to the file. Returns \u00b6 Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] : An http response. async generator function bareasgi_static . file_writer \u00b6 Summary \u00b6 Creates an async generator to write a file. async bareasgi_static . file_writer ( path : str , chunk_size : int ) Parameters \u00b6 path : str (optional) The path of the file to write. chunk_size : int The size of each block. Yields \u00b6 AsyncIterable[bytes] : An async generator of bytes.","title":"bareasgi_static"},{"location":"api/bareasgi_static/#api","text":"","title":"API"},{"location":"api/bareasgi_static/#function-bareasgi_staticadd_static_file_provider","text":"","title":"function bareasgi_static.add_static_file_provider"},{"location":"api/bareasgi_static/#summary","text":"Add static file support. bareasgi_static . add_static_file_provider ( app : Application , source_folder : str , * , mount_point : str , check_source_folder : bool , index_filename : Union[str, NoneType] )","title":"Summary"},{"location":"api/bareasgi_static/#parameters","text":"app : Application (optional) The bareASGI application. source_folder : str (optional) Where to find the files to serve. * (optional) mount_point : str Where the files should appear on the url. check_source_folder : bool If True check the source folder exists. index_filename : Union[str, NoneType] An optional index file name.","title":"Parameters"},{"location":"api/bareasgi_static/#returns","text":"Any :","title":"Returns"},{"location":"api/bareasgi_static/#class-staticfilesprovider","text":"","title":"class StaticFilesProvider"},{"location":"api/bareasgi_static/#summary_1","text":"A static file provider. bareasgi_static . StaticFilesProvider ( * , path_variable : Union[str, NoneType] , check_source_folder : bool , index_filename : Union[str, NoneType] )","title":"Summary"},{"location":"api/bareasgi_static/#parameters_1","text":"* (optional) path_variable : Union[str, NoneType] A path variable to capture the mount point. check_source_folder : bool If True check the source folder exists. index_filename : Union[str, NoneType] An optional index file name.","title":"Parameters"},{"location":"api/bareasgi_static/#async-function-bareasgi_staticfile_response","text":"","title":"async function bareasgi_static.file_response"},{"location":"api/bareasgi_static/#summary_2","text":"A utility method to create a file response. async bareasgi_static . file_response ( scope : Mapping[strAny] , status : int , path : str , headers : UnionListTuple[bytes, bytes]], NoneType] , content_type : Union[str, NoneType] , filename : Union[str, NoneType] , check_modified : Union[bool, NoneType] )","title":"Summary"},{"location":"api/bareasgi_static/#parameters_2","text":"scope : Mapping[strAny] (optional) The ASGI scope. status : int (optional) The HTTP status code. path : str (optional) The path to the file. headers : UnionListTuple[bytes, bytes]], NoneType] The headers. content_type : Union[str, NoneType] The content type. filename : Union[str, NoneType] The filename. check_modified : Union[bool, NoneType] If True check for modifications to the file.","title":"Parameters"},{"location":"api/bareasgi_static/#returns_1","text":"Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] : An http response.","title":"Returns"},{"location":"api/bareasgi_static/#async-generator-function-bareasgi_staticfile_writer","text":"","title":"async generator function bareasgi_static.file_writer"},{"location":"api/bareasgi_static/#summary_3","text":"Creates an async generator to write a file. async bareasgi_static . file_writer ( path : str , chunk_size : int )","title":"Summary"},{"location":"api/bareasgi_static/#parameters_3","text":"path : str (optional) The path of the file to write. chunk_size : int The size of each block.","title":"Parameters"},{"location":"api/bareasgi_static/#yields","text":"AsyncIterable[bytes] : An async generator of bytes.","title":"Yields"},{"location":"user-guide/installation/","text":"Installation \u00b6 The package can be installed with pip. pip install bareasgi-static This is a Python 3.7 and later package with dependencies on: bareASGI aiofiles","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be installed with pip. pip install bareasgi-static This is a Python 3.7 and later package with dependencies on: bareASGI aiofiles","title":"Installation"},{"location":"user-guide/usage/","text":"Usage \u00b6 A utility function is provided. import os.path import uvicorn from bareasgi import Application from bareasgi_static import add_static_file_provider here = os . path . abspath ( os . path . dirname ( __file__ )) app = Application () add_static_file_provider ( app , os . path . join ( here , 'simple_www' ), index_filename = 'index.html' ) uvicorn . run ( app , port = 9010 )","title":"Usage"},{"location":"user-guide/usage/#usage","text":"A utility function is provided. import os.path import uvicorn from bareasgi import Application from bareasgi_static import add_static_file_provider here = os . path . abspath ( os . path . dirname ( __file__ )) app = Application () add_static_file_provider ( app , os . path . join ( here , 'simple_www' ), index_filename = 'index.html' ) uvicorn . run ( app , port = 9010 )","title":"Usage"}]}